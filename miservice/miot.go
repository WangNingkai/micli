package miservice

import (
	"crypto/rc4"
	"encoding/base64"
	"fmt"
	"micli/pkg/util"
	"net/http"
	"os"
	"path"
	"strings"
)

func getSpec(keyword string, specs map[string]string) map[string]string {
	if keyword == "" {
		return specs
	}
	var ret = make(map[string]string)
	for k, v := range specs {
		if k == keyword {
			return map[string]string{k: v}
		} else if strings.Contains(k, keyword) {
			ret[k] = v
		}
	}
	return ret
}

func loadSpec(p string) (map[string]string, error) {
	f, err := os.Open(p)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	j := json.NewDecoder(f)
	var specs map[string]string
	err = j.Decode(&specs)
	if err != nil {
		return nil, err
	}
	return specs, nil
}

type MiotSpecInstances struct {
	Instances []struct {
		Status  string `json:"status"`
		Model   string `json:"model"`
		Version int    `json:"version"`
		Type    string `json:"type"`
		Ts      int    `json:"ts"`
	} `json:"instances"`
}

type MiotSpecInstancesData struct {
	Type        string `json:"type"`
	Description string `json:"description"`
	Services    []struct {
		Iid         int    `json:"iid"`
		Type        string `json:"type"`
		Description string `json:"description"`
		Properties  []struct {
			Iid         int      `json:"iid"`
			Type        string   `json:"type"`
			Description string   `json:"description"`
			Format      string   `json:"format"`
			Access      []string `json:"access"`
			ValueList   []struct {
				Value       int    `json:"value"`
				Description string `json:"description"`
			} `json:"value-list,omitempty"`
			ValueRange []int `json:"value-range,omitempty"`
		} `json:"properties,omitempty"`
		Actions []struct {
			Iid         int           `json:"iid"`
			Type        string        `json:"type"`
			Description string        `json:"description"`
			In          []interface{} `json:"in"`
			Out         []interface{} `json:"out"`
		} `json:"actions,omitempty"`
	} `json:"services"`
}

func (s *IOService) MiotSpec(keyword string) (data *MiotSpecInstancesData, err error) {
	if keyword == "" || !strings.HasPrefix(keyword, "urn") {
		p := path.Join(os.TempDir(), "miot-spec.json")
		var specs map[string]string
		specs, err = loadSpec(p)
		if err != nil {
			var rr *http.Response
			rr, err = s.account.client.Get("https://miot-spec.org/miot-spec-v2/instances?status=all")
			if err != nil {
				return
			}
			defer rr.Body.Close()
			var instanceSpec *MiotSpecInstances
			err = json.NewDecoder(rr.Body).Decode(&instanceSpec)
			if err != nil {
				return
			}
			specs = make(map[string]string)
			for _, v := range instanceSpec.Instances {
				specs[v.Model] = v.Type
			}
			var f *os.File
			f, err = os.Create(p)
			if err == nil {
				defer f.Close()
				_ = json.NewEncoder(f).Encode(specs)
			}
		}
		specs = getSpec(keyword, specs)
		if len(specs) != 1 {
			instances := make([]string, 0, len(specs))
			for _, v := range specs {
				instances = append(instances, v)
			}
			err = fmt.Errorf("found %d instances: %s", len(specs), strings.Join(instances, ", "))
			return
		}
		for _, v := range specs {
			keyword = v
			break
		}
	}
	u := fmt.Sprintf("https://miot-spec.org/miot-spec-v2/instance?type=%s", keyword)
	rs, err := s.account.client.Get(u)
	if err != nil {
		return
	}
	defer rs.Body.Close()

	err = json.NewDecoder(rs.Body).Decode(&data)
	if err != nil {
		return
	}

	/*display := ""
	display += fmt.Sprintf("# Generated by https://github.com/wangningkai/micli\n# http://miot-spec.org/miot-spec-v2/instance?type=%s\n", keyword)*/

	/*for _, service := range result.Services {

	}*/

	return
}

func (s *IOService) MiotDecode(ssecurity string, nonce string, data string, gzip bool) (interface{}, error) {
	signNonceStr, err := util.SignNonce(ssecurity, nonce)
	if err != nil {
		return nil, err
	}
	key, err := base64.StdEncoding.DecodeString(signNonceStr)
	if err != nil {
		return nil, err
	}
	cipher, err := rc4.NewCipher(key)
	if err != nil {
		return nil, err
	}

	cipher.XORKeyStream(key[:1024], key[:1024])
	encryptedData, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		return nil, err
	}
	decrypted := make([]byte, len(encryptedData))
	cipher.XORKeyStream(decrypted, encryptedData)

	if gzip {
		decrypted, err = util.Unzip(decrypted)
		if err != nil {
			return nil, err
		}
	}

	var result interface{}
	err = json.Unmarshal(decrypted, &result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
